version: '3.9'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:16-alpine
    container_name: notification-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-avigo_notifications}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-notificationpass}
      POSTGRES_DB: ${POSTGRES_DB:-avigo_notifications}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-avigo_notifications}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - notification-network

  # Zookeeper для Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: notification-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - notification-network

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: notification-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - notification-network

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: notification-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgres://${POSTGRES_USER:-avigo_notifications}:${POSTGRES_PASSWORD:-notificationpass}@postgres:5432/${POSTGRES_DB:-avigo_notifications}?sslmode=disable
      MIGRATIONS_PATH: ./migrations
      
      # Server
      SERVER_ADDRESS: :8082
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      
      # Kafka
      KAFKA_BROKERS: kafka:29092
      KAFKA_TOPIC_USER_EVENTS: user.events
      KAFKA_GROUP_ID: notification-service
      KAFKA_DIAL_TIMEOUT: 10s
      KAFKA_READ_TIMEOUT: 10s
      KAFKA_MIN_BYTES: 10240
      KAFKA_MAX_BYTES: 10485760
      
      # Email
      EMAIL_PROVIDER: smtp
      EMAIL_SMTP_HOST: ${EMAIL_SMTP_HOST:-smtp.gmail.com}
      EMAIL_SMTP_PORT: ${EMAIL_SMTP_PORT:-587}
      EMAIL_SMTP_USERNAME: ${EMAIL_SMTP_USERNAME}
      EMAIL_SMTP_PASSWORD: ${EMAIL_SMTP_PASSWORD}
      EMAIL_FROM_NAME: ${EMAIL_FROM_NAME:-АвиGo Маркетплейс}
      EMAIL_FROM_ADDRESS: ${EMAIL_FROM_ADDRESS}
      EMAIL_TEMPLATES_PATH: ./assets/templates/email
    ports:
      - "8082:8082"
    volumes:
      # Для разработки: монтируем шаблоны
      - ./assets:/app/assets:ro
    networks:
      - notification-network

volumes:
  postgres_data:
    driver: local

networks:
  notification-network:
    driver: bridge
